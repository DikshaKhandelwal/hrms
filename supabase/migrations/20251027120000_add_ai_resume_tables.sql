/*
  # AI Resume Scanning Tables
  
  Adds tables for AI-powered resume screening and job matching
*/

-- ========= JOBS TABLE =========
CREATE TABLE IF NOT EXISTS public.jobs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    job_title TEXT NOT NULL,
    company_name TEXT,
    job_description TEXT,
    location TEXT,
    job_type TEXT, -- Full-time, Part-time, Contract
    salary_range TEXT,
    experience_level TEXT, -- Entry, Mid, Senior
    skills_required TEXT, -- Comma-separated skills
    industry TEXT,
    posted_date DATE DEFAULT CURRENT_DATE,
    employment_mode TEXT, -- Remote, On-site, Hybrid
    status TEXT DEFAULT 'active', -- active, closed, on-hold
    created_by UUID REFERENCES auth.users(id),
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

COMMENT ON TABLE public.jobs IS 'Job postings for recruitment and AI resume matching';

-- ========= PREDICTION HISTORY TABLE =========
CREATE TABLE IF NOT EXISTS public.prediction_history (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    candidate_id UUID REFERENCES public.candidates(id) ON DELETE CASCADE,
    job_id BIGINT REFERENCES public.jobs(id) ON DELETE CASCADE,
    resume_name TEXT,
    model_used TEXT NOT NULL, -- Gemini Pro, LSTM, Transformer, Rule-Based
    match_score INTEGER CHECK (match_score >= 0 AND match_score <= 100),
    skill_match_score INTEGER CHECK (skill_match_score >= 0 AND skill_match_score <= 100),
    experience_match_score INTEGER CHECK (experience_match_score >= 0 AND experience_match_score <= 100),
    matched_skills TEXT[], -- Array of matched skills
    missing_skills TEXT[], -- Array of missing skills
    suggestions TEXT,
    gemini_suitability_summary TEXT,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

COMMENT ON TABLE public.prediction_history IS 'Logs AI-powered resume-to-job matching results';

-- ========= UPDATE CANDIDATES TABLE =========
-- Add AI-specific columns to candidates table if they don't exist
DO $$ 
BEGIN
    -- Add resume_text column if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='candidates' AND column_name='resume_text') THEN
        ALTER TABLE public.candidates ADD COLUMN resume_text TEXT;
    END IF;
    
    -- Add skills_matched column if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='candidates' AND column_name='skills_matched') THEN
        ALTER TABLE public.candidates ADD COLUMN skills_matched TEXT[];
    END IF;
    
    -- Add ai_model_used column if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='candidates' AND column_name='ai_model_used') THEN
        ALTER TABLE public.candidates ADD COLUMN ai_model_used TEXT;
    END IF;
    
    -- Add last_screening_date column if it doesn't exist
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='candidates' AND column_name='last_screening_date') THEN
        ALTER TABLE public.candidates ADD COLUMN last_screening_date TIMESTAMPTZ;
    END IF;
END $$;

-- ========= INDEXES =========
CREATE INDEX IF NOT EXISTS idx_jobs_status ON public.jobs(status);
CREATE INDEX IF NOT EXISTS idx_jobs_created_at ON public.jobs(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_prediction_history_candidate ON public.prediction_history(candidate_id);
CREATE INDEX IF NOT EXISTS idx_prediction_history_job ON public.prediction_history(job_id);
CREATE INDEX IF NOT EXISTS idx_prediction_history_score ON public.prediction_history(match_score DESC);
CREATE INDEX IF NOT EXISTS idx_candidates_ai_score ON public.candidates(ai_screening_score DESC);

-- ========= RLS POLICIES =========

-- Jobs table policies
ALTER TABLE public.jobs ENABLE ROW LEVEL SECURITY;

CREATE POLICY "jobs_select_all" ON public.jobs
    FOR SELECT USING (true);

CREATE POLICY "jobs_insert_auth" ON public.jobs
    FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

CREATE POLICY "jobs_update_own" ON public.jobs
    FOR UPDATE USING (created_by = auth.uid());

CREATE POLICY "jobs_delete_own" ON public.jobs
    FOR DELETE USING (created_by = auth.uid());

-- Prediction history policies
ALTER TABLE public.prediction_history ENABLE ROW LEVEL SECURITY;

CREATE POLICY "prediction_history_select_all" ON public.prediction_history
    FOR SELECT USING (true);

CREATE POLICY "prediction_history_insert_auth" ON public.prediction_history
    FOR INSERT WITH CHECK (auth.uid() IS NOT NULL);

-- Update trigger for jobs
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_jobs_updated_at BEFORE UPDATE ON public.jobs
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
